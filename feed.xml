<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刘三羊区块链博客</title>
    <description>区块链老白和你一起学习区块链。</description>
    <link>http://liusanyang.cn/</link>
    <atom:link href="http://liusanyang.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 May 2018 21:36:31 +0800</pubDate>
    <lastBuildDate>Tue, 15 May 2018 21:36:31 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>Golang Hashmap02</title>
        <description>&lt;h1 id=&quot;密码学2&quot;&gt;密码学2&lt;/h1&gt;
&lt;p&gt;######hash散列表
下面我们来写一个简单的hash散列表，首先对上一节中的代码我们做一些改进，在这里我们声明一个结构体类型，作为几点数据的类型，然后对代码的参数进行一些修改。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package LinkNodes

import (
	&quot;fmt&quot;
)

//用结构体做数据域的类型
type DM struct {
	K string
	V string
}

//声明全局变量，保存头节点
var head *Node
var curr *Node //当前节点

//声明节点类型
type Node struct {
	//数据域
	Data DM
	//地址域
	NextNode *Node
}

//创建头节点
func CreateHeadNode(k string, v string) *Node {
	var node *Node = new(Node)
	//	设置数据结构体中的数据域
	node.Data.K = k
	node.Data.V = v
	//设置地址域
	node.NextNode = nil
	//保存头节点
	head = node
	curr = node

	return node
}

//在指定的节点（curr）添加新节点
func AddNode(k string, v string, curr *Node) *Node {
	var newNode *Node = new(Node)
	//设置新节点重的数据域
	newNode.Data.K = k
	newNode.Data.V = v
	//设置地址域
	newNode.NextNode = nil
	//挂接节点
	curr.NextNode = newNode
	curr = newNode

	return newNode
}

//在指定的节点后遍历链表
func ShowNodes(n *Node) {
	var node = n
	for {
		if node.NextNode == nil {
			fmt.Println(node.Data)
			break
		} else {
			fmt.Println(node.Data)
			node = node.NextNode
		}
	}
}

//计算节点的个数
func NodeCnt() int {
	var cnt = 1
	var node = head
	for {
		if node.NextNode == nil {
			break
		} else {
			node = node.NextNode
			cnt++
		}
	}
	return cnt
}        
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们来创建一个新的文件夹HashMp,然后创建新的文件MyHashMap.go，在这里我们声明一个长度为16的数组，如果想改成32或者64等其他长度的数组，要对散列算法进行更改。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package HashMp

import (
	&quot;MyHashMap/LinkNodes&quot;
	&quot;fmt&quot;
)

//声明全局数组
var bultArr [16]*LinkNodes.Node

//给数组初始化
func CreateBulet() {
	var arr = [16]*LinkNodes.Node{}
	for i := 0; i &amp;lt; 16; i++ {
		arr[i] = LinkNodes.CreateHeadNode(&quot;头节点&quot;, &quot;头节点&quot;)
	}
	bultArr = arr
}

//将key转换成数组下标的散列算法
func HashCode(key string) int {
	var index int = 0
	index = int(key[0])
	for k := 0; k &amp;lt; len(key); k++ {
		//1103515245是十六位的hash因子散列值
		index *= (1103515245 + int(key[k]))
	}
	index &amp;gt;&amp;gt;= 27
	index &amp;amp;= 16 - 1

	return index
}

//向数组中添加健值对
func AddKeyValue(k string, v string) {
	//计算建所对应的木桶下表
	var pos = HashCode(k)
	//获得木桶数组
	var head *LinkNodes.Node = bultArr[pos]
	//向指定下标的头节点添加节点
	LinkNodes.AddNode(k, v, head)
}

//获取数据
func GetValueByKey(k string) string {
	var pos = HashCode(k)
	var head *LinkNodes.Node = bultArr[pos]

	//通过头节点遍历列表
	//LinkNodes.ShowNodes(head)

	//查找对应下标下的链表，判断在key域节点中的key一致时打印
	for {
		if head.Data.K == k {
			fmt.Println(head.Data.V)
			break
		} else {
			head = head.NextNode
			if head.NextNode == nil {

			}
	}
}
return &quot;&quot;
 }	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在主函数中使用方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;MyHashMap/HashMp&quot;
	&quot;fmt&quot;
)


func main()  {
	fmt.Println(&quot;Hello World!&quot;)

	//测试hashMp八下的散列因子是否平均分布
	//fmt.Println(HashMp.HashCode(&quot;三羊&quot;))

	HashMp.CreateBulet()

	HashMp.AddKeyValue(&quot;abc&quot;,&quot;hello&quot;)
	HashMp.AddKeyValue(&quot;bcd&quot;,&quot;world&quot;)

	HashMp.GetValueByKey(&quot;bcd&quot;)
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出内容为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Hello World!
 world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 15 May 2018 00:00:00 +0800</pubDate>
        <link>http://liusanyang.cn/2018/05/15/golang-hashMap02/</link>
        <guid isPermaLink="true">http://liusanyang.cn/2018/05/15/golang-hashMap02/</guid>
        
        
      </item>
    
      <item>
        <title>Golang Hashmap01</title>
        <description>&lt;h1 id=&quot;密码学&quot;&gt;密码学&lt;/h1&gt;
&lt;p&gt;##古典密码学
    古典密码编码方法归根结底主要有两种，即置换和代换。       &lt;br /&gt;
    把明文中的字母重新排列，字母本身不变，但其位置改变了，这样编成的密码称为置换密码。最简单的置换密码是把明文中的字母顺序倒过来，然后截成固定长度的字母组作为密文。
    代换密码则是将明文中的字符替代成其他字符。
##现代密码学
    现代密码学研究信息从发端到收端的安全传输和安全存储，是研究“知己知彼”的一门科学。其核心是密码编码学和密码分析学。前者致力于建立难以被敌方或对手攻破的安全密码体制，即“知己”；后者则力图破译敌方或对手已有的密码体制，即“知彼”
######hash散列原理
    哈希表（也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。&lt;/p&gt;

&lt;p&gt;数据结构链表
下面我们来写一个单向的简单链表，首先我们要声明一个头节点是为了保存头节点信息，同理声明一个当前节点保存当前节点的信息，再然后声明一个节点类型的结构体，里面有两个变量，一个是节点的存储数据，数据类型为字符串，另一个是下一个节点的地址数据类型节点的指针类型。(package LinkNodes的内容写在LinkNodes文件夹下的node.go文件中)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    package LinkNodes

    import &quot;fmt&quot;
    
    //声明全局变量，保存头节点
    var head *Node
    var curr *Node //当前节点
    
    //声明节点类型
    type Node struct {
    	//数据域
    	Data string
    	//地址域
    	NextNode *Node
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们首先创建一个头节点，需要注意的是在设置完数据域和地址域后，要把头节点信息赋予前面声明的全局变量head，这个head变量在后面很多方法里我们都需要用到。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   //创建头节点
    func CreateHeadNode(data string) *Node  {
    	var node *Node = new(Node)
    	//	设置数据结构体中的数据域
    	node.Data = data
    	//设置地址域
    	node.NextNode = nil
    	//保存头节点
    	head = node
    	curr = node
    
    	return node
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们来创建多种操作链表的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   //添加新节点
    func AddNode(data string) *Node {
    	var newNode *Node = new(Node)
    	//设置新节点重的数据域
    	newNode.Data = data
    	//设置地址域
    	newNode.NextNode = nil
    	//挂接节点
    	curr.NextNode = newNode
    	curr = newNode
    
    	return newNode
    }
    
    //遍历链表
    func ShowNodes() {
    	var node = head
    	for {
    		if node.NextNode == nil {
    			fmt.Println(node.Data)
    			break
    		} else {
    			fmt.Println(node.Data)
    			node = node.NextNode
    		}
    	}
    }
    
    //计算节点的个数
    func NodeCnt() int {
    	var cnt = 1
    	var node = head
    	for {
    		if node.NextNode == nil {
    			break
    		} else {
    			node = node.NextNode
    			cnt++
    		}
    	}
    	return cnt
    }
    
    //插入节点
    func InsertNodeByIndex(index int, data string) *Node {
    	if index == 0 {
    		//添加新的头节点
    		var node *Node = new(Node)
    		node.Data = data
    		head = node
    	} else if index &amp;gt; NodeCnt()-1 {
    		//添加节点
    		AddNode(data)
    	} else {
    		//中间插入节点
    		var n = head
    		for i := 0; i &amp;lt; index-1; i++ {
    			n = n.NextNode
    		}
    
    		var newNode *Node = new(Node)
    		newNode.Data = data
    		newNode.NextNode = n.NextNode
    		n.NextNode = newNode
    	}
    
    	return nil
    }
    
    //删除节点
    func DeleteNodeByIndex(index int) {
    	var node = head
    	if index == 0 {
    		//删除头节点，第二个节点为头节点
    		head = node.NextNode
    	} else {
    		for i := 0; i &amp;lt; index; i++ {
    			node = node.NextNode
    		}
    		node.NextNode = node.NextNode.NextNode
    	}
    }
    
    //修改指定下标的节点内容
    func UpdateNodeByIndex(index int, data string) {
    	var node = head
    	if index == 0 {
    		head.Data = data
    	} else {
    		for i := 0; i &amp;lt; index; i++ {
    			node = node.NextNode
    		}
    		node.Data = data
    	}
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们在主函数中使用这些方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;MyHashMap_简单链表/LinkNodes&quot;
	&quot;fmt&quot;
)


func main()  {
	fmt.Println(&quot;Hello World!&quot;)

	LinkNodes.CreateHeadNode(&quot;头节点&quot;)
	LinkNodes.AddNode(&quot;第一节点&quot;)
	LinkNodes.AddNode(&quot;第二节点&quot;)
	LinkNodes.AddNode(&quot;第三节点&quot;)
	LinkNodes.AddNode(&quot;第四节点&quot;)

	LinkNodes.ShowNodes()
    	fmt.Println(&quot;共有&quot;,LinkNodes.NodeCnt(),&quot;个节点&quot;)

	fmt.Println(&quot;--------------------------------&quot;)
	//插入新节点
	LinkNodes.InsertNodeByIndex(2,&quot;abc&quot;)
	LinkNodes.ShowNodes()
	//删除节点
	fmt.Println(&quot;--------------------------------&quot;)
	LinkNodes.DeleteNodeByIndex(3)
	LinkNodes.ShowNodes()
	//修改节点内容
	fmt.Println(&quot;--------------------------------&quot;)
	LinkNodes.UpdateNodeByIndex(3,&quot;abc&quot;)
	LinkNodes.ShowNodes()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出内容为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello World!
头节点
第一节点
第二节点
第三节点
第四节点
共有 5 个节点
--------------------------------
头节点
第一节点
abc
第二节点
第三节点
第四节点
--------------------------------
头节点
第一节点
第二节点
第三节点
第四节点
--------------------------------
头节点
第一节点
第二节点
abc
第四节点
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 15 May 2018 00:00:00 +0800</pubDate>
        <link>http://liusanyang.cn/2018/05/15/golang-hashMap01/</link>
        <guid isPermaLink="true">http://liusanyang.cn/2018/05/15/golang-hashMap01/</guid>
        
        
      </item>
    
      <item>
        <title>Golang经典笔试题及答案（下篇）</title>
        <description>&lt;h3 id=&quot;1-下面代码能运行吗为什么&quot;&gt;1. 下面代码能运行吗？为什么&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Param map[string]interface{}

type Show struct {
	Param
}

func main1() {
	s := new(Show)
	s.Param[&quot;RMB&quot;] = 10000
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;panic: assignment to entry in nil map

goroutine 1 [running]:
main.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如上所示，运行过程中会发生异常，原因是因为字典&lt;code class=&quot;highlighter-rouge&quot;&gt;Param&lt;/code&gt;的默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，当给字典&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;增加键值对是就会发生运行时错误&lt;code class=&quot;highlighter-rouge&quot;&gt;panic: assignment to entry in nil map&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正确的修改方案如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

type Param map[string]interface{}

type Show struct {
	Param
}

func main() {

	// 创建Show结构体对象
	s := new(Show)
	// 为字典Param赋初始值
	s.Param = Param{}
	// 修改键值对
	s.Param[&quot;RMB&quot;] = 10000
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;{map[RMB:10000]}

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2-请说出下面代码存在什么问题&quot;&gt;2. 请说出下面代码存在什么问题&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type student struct {
	Name string
}

func f(v interface{}) {
	switch msg := v.(type) {
    	case *student, student:
    		msg.Name
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;有两个问题：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;问题一：&lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt;是一个没有声明任何方法的接口。&lt;/li&gt;
  &lt;li&gt;问题二：&lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt;是一个属性，而不是方法，&lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt;类型的变量无法调用属性。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;3-写出打印的结果&quot;&gt;3. 写出打印的结果。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type People struct {
	name string `json:&quot;name&quot;`
}

func main() {
	js := `{
		&quot;name&quot;:&quot;11&quot;
	}`
	var p People
	err := json.Unmarshal([]byte(js), &amp;amp;p)
	if err != nil {
		fmt.Println(&quot;err: &quot;, err)
		return
	}
	fmt.Println(&quot;people: &quot;, p)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;输出内容如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;people:  {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;p中的属性值为空的原因是因为，name的首字母小写，修改成大写，重新运行即可。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;encoding/json&quot;
	&quot;fmt&quot;
)

type People struct {
	Name string `json:&quot;name&quot;`
}

func main() {
	js := `{
        &quot;name&quot;:&quot;11&quot;
    }`
	var p People
	err := json.Unmarshal([]byte(js), &amp;amp;p)
	if err != nil {
		fmt.Println(&quot;err: &quot;, err)
		return
	}
	fmt.Println(&quot;people: &quot;, p)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;people:  {11}

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;4-下面的代码是有问题的请说明原因&quot;&gt;4. 下面的代码是有问题的，请说明原因。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

type People struct {
	Name string
}

func (p *People) String() string {
	return fmt.Sprintf(&quot;print: %v&quot;, p)
}

func main() {
	p := &amp;amp;People{}
	p.String()
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;runtime: goroutine stack exceeds 1000000000-byte limit
fatal error: stack overflow

runtime stack:
runtime.throw(0x10c122b, 0xe)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;如下所示，上面的代码出现了栈溢出，原因是因为%v格式化字符串是本身会调用String()方法，上面的栈溢出是因为无限递归所致。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-请找出下面代码的问题所在&quot;&gt;5. 请找出下面代码的问题所在。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int, 1000)
	go func() {
		for i := 0; i &amp;lt; 10; i++ {
			ch &amp;lt;- i
		}
	}()
	go func() {
		for {
			a, ok := &amp;lt;-ch
			if !ok {
				fmt.Println(&quot;close&quot;)
				return
			}
			fmt.Println(&quot;a: &quot;, a)
		}
	}()
	close(ch)
	fmt.Println(&quot;ok&quot;)
	time.Sleep(time.Second * 100)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;panic: send on closed channel
ok

goroutine 5 [running]:
main.main.func1(0xc420098000)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;解析：出现上面错误的原因是因为提前关闭通道所致。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正确代码如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	// 创建一个缓冲通道
	ch := make(chan int, 1000)

	go func() {
		for i := 0; i &amp;lt; 10; i++ {
			ch &amp;lt;- i
		}
	}()

	go func() {
		for i := 0; i &amp;lt; 10; i++ {
			a, ok := &amp;lt;-ch
			
			if !ok {
				fmt.Println(&quot;close&quot;)
				close(ch)
				return
			}
			fmt.Println(&quot;a: &quot;, a)
		}
	}()

	fmt.Println(&quot;ok&quot;)
	time.Sleep(time.Second)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ok
a:  0
a:  1
a:  2
a:  3
a:  4
a:  5
a:  6
a:  7
a:  8
a:  9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;6-请说明下面代码书写是否正确&quot;&gt;6. 请说明下面代码书写是否正确。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var value int32

func SetValue(delta int32) {
	for {
		v := value
		if atomic.CompareAndSwapInt32(&amp;amp;value, v(v+delta)) {
			break
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.CompareAndSwapInt32&lt;/code&gt;里面一共三个参数，上面的书写错误，正确的书写是：&lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.CompareAndSwapInt32(&amp;amp;value, v,v+delta)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;第一个参数的值应该是指向被操作值的指针值。该值的类型即为&lt;code class=&quot;highlighter-rouge&quot;&gt;*int32&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;后两个参数的类型都是&lt;code class=&quot;highlighter-rouge&quot;&gt;int32&lt;/code&gt;类型。它们的值应该分别代表被操作值的旧值和新值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CompareAndSwapInt32·函数在被调用之后会先判断参数&lt;/code&gt;addr&lt;code class=&quot;highlighter-rouge&quot;&gt;指向的被操作值与参数&lt;/code&gt;old`的值是否相等。&lt;/li&gt;
  &lt;li&gt;仅当此判断得到肯定的结果之后，该函数才会用参数&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;代表的新值替换掉原先的旧值。否则，后面的替换操作就会被忽略。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;完整代码如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;sync/atomic&quot;
	&quot;fmt&quot;
)

var value int32

func SetValue(delta int32) {
	for {
		v := value
		// 比较并交换

		if atomic.CompareAndSwapInt32(&amp;amp;value, v,v+delta) {
			fmt.Println(value)
			break
		}
	}
}

func main()  {
	SetValue(100)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果为&lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-下面的程序运行后为什么会爆异常&quot;&gt;7. 下面的程序运行后为什么会爆异常。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

type Project struct{}

func (p *Project) deferError() {
	if err := recover(); err != nil {
		fmt.Println(&quot;recover: &quot;, err)
	}
}

func (p *Project) exec(msgchan chan interface{}) {
	for msg := range msgchan {
		m := msg.(int)
		fmt.Println(&quot;msg: &quot;, m)
	}
}

func (p *Project) run(msgchan chan interface{}) {
	for {
		defer p.deferError()
		go p.exec(msgchan)
		time.Sleep(time.Second * 2)
	}
}

func (p *Project) Main() {
	a := make(chan interface{}, 100)
	go p.run(a)
	go func() {
		for {
			a &amp;lt;- &quot;1&quot;
			time.Sleep(time.Second)
		}
	}()
	time.Sleep(time.Second * 100)
}

func main() {
	p := new(Project)
	p.Main()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;panic: interface conversion: interface {} is string, not int

goroutine 17 [running]:
main.(*Project).exec(0x1157c08, 0xc420068060)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;出现异常的原因是因为写入到管道的数据类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;,而&lt;code class=&quot;highlighter-rouge&quot;&gt;m := msg.(int)&lt;/code&gt;这句代码里面却使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;，修改方法，将&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;即可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;完整正确代码如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

type Project struct{}

func (p *Project) deferError() {
	if err := recover(); err != nil {
		fmt.Println(&quot;recover: &quot;, err)
	}
}

func (p *Project) exec(msgchan chan interface{}) {
	for msg := range msgchan {
		m := msg.(string)
		fmt.Println(&quot;msg: &quot;, m)
	}
}

func (p *Project) run(msgchan chan interface{}) {
	for {
		defer p.deferError()
		go p.exec(msgchan)
		time.Sleep(time.Second * 2)
	}
}

func (p *Project) Main() {
	a := make(chan interface{}, 100)
	go p.run(a)
	go func() {
		for {
			a &amp;lt;- &quot;1&quot;
			time.Sleep(time.Second)
		}
	}()
	time.Sleep(time.Second * 100)
}

func main() {
	p := new(Project)
	p.Main()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msg:  1
msg:  1
msg:  1
.
.
.
msg:  1
msg:  1
msg:  1
msg:  1
msg:  1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;8-请说出下面代码哪里写错了&quot;&gt;8. 请说出下面代码哪里写错了。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	abc := make(chan int, 1000)
	for i := 0; i &amp;lt; 10; i++ {
		abc &amp;lt;- i
	}
	go func() {
		for {
			a := &amp;lt;-abc
			fmt.Println(&quot;a: &quot;, a)
		}
	}()
	close(abc)
	fmt.Println(&quot;close&quot;)
	time.Sleep(time.Second * 100)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go中的for循环是死循环，应该设置出口。正确代码如下：&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	abc := make(chan int, 1000)
	for i := 0; i &amp;lt; 10; i++ {
		abc &amp;lt;- i
	}
	go func() {
		for {
			a,ok := &amp;lt;-abc
			if !ok {
				fmt.Println(&quot;结束！&quot;)
				return
			}
			fmt.Println(&quot;a: &quot;, a)
		}
	}()
	close(abc)
	fmt.Println(&quot;close&quot;)
	time.Sleep(time.Second * 100)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;close
a:  0
a:  1
a:  2
a:  3
a:  4
a:  5
a:  6
a:  7
a:  8
a:  9
结束！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;9-请说出下面代码执行时为什么会报错&quot;&gt;9. 请说出下面代码，执行时为什么会报错&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Student struct {
	name string
}

func main() {
	m := map[string]Student{&quot;people&quot;: {&quot;liyuechun&quot;}}
	m[&quot;people&quot;].name = &quot;wuyanzu&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;答案：报错的原因是因为不能修改字典中&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;为结构体的属性值。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码作如下修改方可运行：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

type Student struct {
	name string
}

func main() {
	m := map[string]Student{&quot;people&quot;: {&quot;liyuechun&quot;}}
	fmt.Println(m)
	fmt.Println(m[&quot;people&quot;])

	// 不能修改字典中结构体属性的值
	//m[&quot;people&quot;].name = &quot;wuyanzu&quot;
	
	var s Student = m[&quot;people&quot;] //深拷贝
	s.name = &quot;xietingfeng&quot;
	fmt.Println(m)
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map[people:{liyuechun}]
{liyuechun}
map[people:{liyuechun}]
{wuyanzu}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;10-请说出下面的代码存在什么问题&quot;&gt;10. 请说出下面的代码存在什么问题&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type query func(string) string

func exec(name string, vs ...query) string {
	ch := make(chan string)
	fn := func(i int) {
		ch &amp;lt;- vs[i](name)
	}
	for i, _ := range vs {
		go fn(i)
	}
	return &amp;lt;-ch
}

func main() {
	ret := exec(&quot;111&quot;, func(n string) string {
		return n + &quot;func1&quot;
	}, func(n string) string {
		return n + &quot;func2&quot;
	}, func(n string) string {
		return n + &quot;func3&quot;
	}, func(n string) string {
		return n + &quot;func4&quot;
	})
	fmt.Println(ret)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return &amp;lt;-ch&lt;/code&gt;&lt;/strong&gt;之执行一次，所以不管传入多少&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;函数，都只是读取最先执行完的&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;。&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://liusanyang.cn/2018/04/27/golang-interview/</link>
        <guid isPermaLink="true">http://liusanyang.cn/2018/04/27/golang-interview/</guid>
        
        <category>笔试题</category>
        
        
      </item>
    
      <item>
        <title>Golang经典笔试题及答案（上篇）</title>
        <description>&lt;h3 id=&quot;1-写出下面代码输出内容&quot;&gt;1. 写出下面代码输出内容&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;package main

import (
	&quot;fmt&quot;
)

func main() {
	defer_call()
}

func defer_call() {

	defer func() {
		fmt.Println(&quot;打印前&quot;)
	}()

	defer func() {
		fmt.Println(&quot;打印中&quot;)
	}()

	defer func() {
		fmt.Println(&quot;打印后&quot;)
	}()

	panic(&quot;触发异常&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个案例中，&lt;code class=&quot;highlighter-rouge&quot;&gt;触发异常&lt;/code&gt;这几个字打印的顺序其实是不确定的。&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;panic&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;recover&lt;/code&gt;一般都会配套使用来捕捉异常。先看下面的案例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;案例一&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
)

func main() {
	defer_call()
}

func defer_call() {

	defer func() {
		fmt.Println(&quot;打印前&quot;)
	}()

	defer func() {
		fmt.Println(&quot;打印中&quot;)
	}()

	defer func() { // 必须要先声明defer，否则recover()不能捕获到panic异常

		if err := recover();err != nil {
			fmt.Println(err) //err 就是panic传入的参数
		}
		fmt.Println(&quot;打印后&quot;)
	}()

	panic(&quot;触发异常&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;输出内容为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;触发异常
打印后
打印中
打印前

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;案例二&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
)

func main() {
	defer_call()
}

func defer_call() {

	defer func() {
		fmt.Println(&quot;打印前&quot;)
	}()

	defer func() { // 必须要先声明defer，否则recover()不能捕获到panic异常
		if err := recover();err != nil {
			fmt.Println(err) //err 就是panic传入的参数
		}
		fmt.Println(&quot;打印中&quot;)
	}()

	defer func() {

		fmt.Println(&quot;打印后&quot;)
	}()

	panic(&quot;触发异常&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;输出内容为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;打印后
触发异常
打印中
打印前

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;案例三&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
)

func main() {
	defer_call()
}

func defer_call() {

	defer func() {
		if err := recover();err != nil {
			fmt.Println(err) //err 就是panic传入的参数
		}
		fmt.Println(&quot;打印前&quot;)
	}()

	defer func() { // 必须要先声明defer，否则recover()不能捕获到panic异常
		if err := recover();err != nil {
			fmt.Println(err) //err 就是panic传入的参数
		}
		fmt.Println(&quot;打印中&quot;)
	}()

	defer func() {
		if err := recover();err != nil {
			fmt.Println(err) //err 就是panic传入的参数
		}
		fmt.Println(&quot;打印后&quot;)
	}()

	panic(&quot;触发异常&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;输出内容为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;触发异常
打印后
打印中
打印前

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;函数属延迟执行，延迟到调用者函数执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 命令前被执行。多个&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;之间按&lt;code class=&quot;highlighter-rouge&quot;&gt;LIFO&lt;/code&gt;先进后出顺序执行。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt;中可以抛出一个&lt;code class=&quot;highlighter-rouge&quot;&gt;panic&lt;/code&gt;的异常，然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;中通过&lt;code class=&quot;highlighter-rouge&quot;&gt;recover&lt;/code&gt;捕获这个异常，然后正常处理。&lt;/li&gt;
  &lt;li&gt;如果同时有多个&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;，那么异常会被最近的&lt;code class=&quot;highlighter-rouge&quot;&gt;recover()&lt;/code&gt;捕获并正常处理。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-以下代码有什么问题说明原因&quot;&gt;2. 以下代码有什么问题，说明原因&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;package main
import (
	&quot;fmt&quot;
)
type student struct {
	Name string
	Age  int
}
func pase_student() map[string]*student {
	m := make(map[string]*student)
	stus := []student{
		{Name: &quot;zhou&quot;, Age: 24},
		{Name: &quot;li&quot;, Age: 23},
		{Name: &quot;wang&quot;, Age: 22},
	}
	for _, stu := range stus {
		m[stu.Name] = &amp;amp;stu
	}
	return m
}
func main() {
	students := pase_student()
	for k, v := range students {
		fmt.Printf(&quot;key=%s,value=%v \n&quot;, k, v)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key=zhou,value=&amp;amp;{wang 22} 
key=li,value=&amp;amp;{wang 22} 
key=wang,value=&amp;amp;{wang 22} 

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改一下代码：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将下面的代码：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for _, stu := range stus {
    m[stu.Name] = &amp;amp;stu
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for _, stu := range stus {
	fmt.Printf(&quot;%v\t%p\n&quot;,stu,&amp;amp;stu)
	m[stu.Name] = &amp;amp;stu
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;shen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;xc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4200&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4020&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;xc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4200&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4020&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;xc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4200&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4020&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;key=shen,value=&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;key=li,value=&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;key=wang,value=&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;通过上面的案例，我们不难发现&lt;code class=&quot;highlighter-rouge&quot;&gt;stu&lt;/code&gt;&lt;/strong&gt;变量的地址始终保持不变，每次遍历仅进行&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;值拷贝，故&lt;code class=&quot;highlighter-rouge&quot;&gt;m[stu.Name]=&amp;amp;stu&lt;/code&gt;实际上一直指向同一个地址，最终该地址的值为遍历的最后一个&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;的值拷贝。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;形同如下代码：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var stu student 
for _, stu = range stus {
	m[stu.Name] = &amp;amp;stu
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修正方案，取数组中原始值的地址：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for i, _ := range stus {
	stu:=stus[i]
	m[stu.Name] = &amp;amp;stu
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;重新运行，效果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;shen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;xc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;060&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;xc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;xc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;key=shen,value=&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;shen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;key=li,value=&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;key=wang,value=&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3-下面的代码会输出什么并说明原因&quot;&gt;3. 下面的代码会输出什么，并说明原因&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;runtime&quot;
	&quot;sync&quot;
)

func init() {
	fmt.Println(&quot;Current Go Version:&quot;, runtime.Version())
}
func main() {
	runtime.GOMAXPROCS(1)

	count := 10
	wg := sync.WaitGroup{}
	wg.Add(count * 2)
	for i := 0; i &amp;lt; count; i++ {
		go func() {
			fmt.Printf(&quot;[%d]&quot;, i)
			wg.Done()
		}()
	}
	for i := 0; i &amp;lt; count; i++ {
		go func(i int) {
			fmt.Printf(&quot;-%d-&quot;, i)
			wg.Done()
		}(i)
	}
	wg.Wait()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行效果：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Current Go Version: go1.10.1
-9-[10][10][10][10][10][10][10][10][10][10]-0--1--2--3--4--5--6--7--8-
Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;两个&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;循环内部&lt;code class=&quot;highlighter-rouge&quot;&gt;go func&lt;/code&gt; 调用参数i的方式是不同的，导致结果完全不同。这也是新手容易遇到的坑。&lt;/p&gt;

&lt;p&gt;第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go func&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;是外部&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;的一个变量，地址不变化。遍历完成后，最终&lt;code class=&quot;highlighter-rouge&quot;&gt;i=10&lt;/code&gt;。故&lt;code class=&quot;highlighter-rouge&quot;&gt;go func&lt;/code&gt;执行时，&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;的值始终是&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;次遍历很快完成）。&lt;/p&gt;

&lt;p&gt;第二个&lt;code class=&quot;highlighter-rouge&quot;&gt;go func&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;是函数参数，与外部&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;完全是两个变量。尾部(&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;)将发生值拷贝，&lt;code class=&quot;highlighter-rouge&quot;&gt;go func&lt;/code&gt;内部指向值拷贝地址。&lt;/p&gt;

&lt;h3 id=&quot;4-下面代码会输出什么&quot;&gt;4. 下面代码会输出什么？&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

type People struct{}

func (p *People) ShowA() {
	fmt.Println(&quot;showA&quot;)
	p.ShowB()
}
func (p *People) ShowB() {
	fmt.Println(&quot;showB&quot;)
}

type Teacher struct {
	People
}

func (t *Teacher) ShowB() {
	fmt.Println(&quot;teacher showB&quot;)
}

func main() {
	t := Teacher{}
	t.ShowA()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;showA
showB

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt;中没有继承,上面这种写法叫组合。&lt;/p&gt;

&lt;p&gt;上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;t.ShowA()&lt;/code&gt;等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;t.People.ShowA()&lt;/code&gt;，将上面的代码修改如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	t := Teacher{}
	t.ShowA()
	fmt.Println(&quot;---------------&quot;)
	t.People.ShowA()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果为：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;showA
showB
---------------
showA
showB

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;5-下面代码会触发异常吗请详细说明&quot;&gt;5. 下面代码会触发异常吗？请详细说明&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

func main() {
	runtime.GOMAXPROCS(1)
	int_chan := make(chan int, 1)
	string_chan := make(chan string, 1)
	int_chan &amp;lt;- 1
	string_chan &amp;lt;- &quot;hello&quot;
	select {
    	case value := &amp;lt;-int_chan:
    		fmt.Println(value)
    	case value := &amp;lt;-string_chan:
    		panic(value)
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有可能会发生异常，如果没有&lt;code class=&quot;highlighter-rouge&quot;&gt;selct&lt;/code&gt;这段代码，就会出现线程阻塞，当有&lt;code class=&quot;highlighter-rouge&quot;&gt;selct&lt;/code&gt;这个语句后，系统会随机抽取一个&lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;进行判断，只有有其中一条语句正常&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;，此程序将立即执行。&lt;/p&gt;

&lt;h3 id=&quot;6-下面代码输出什么&quot;&gt;6. 下面代码输出什么？&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

func calc(index string, a, b int) int {
	ret := a + b
	fmt.Println(index, a, b, ret)
	return ret
}

func main() {
	a := 1
	b := 2
	defer calc(&quot;1&quot;, a, calc(&quot;10&quot;, a, b))
	a = 0
	defer calc(&quot;2&quot;, a, calc(&quot;20&quot;, a, b))
	b = 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 1 2 3
20 0 2 2
2 0 2 2
1 1 3 4

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在解题前需要明确两个概念：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;是在函数末尾的&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;前执行，先进后执行。&lt;/li&gt;
  &lt;li&gt;函数调用时 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; 参数发生值拷贝。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不管代码顺序如何，&lt;code class=&quot;highlighter-rouge&quot;&gt;defer calc func&lt;/code&gt;中参数&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;必须先计算，故会在运行到第三行时，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(&quot;10&quot;,a,b)&lt;/code&gt;输出：&lt;code class=&quot;highlighter-rouge&quot;&gt;10 1 2 3&lt;/code&gt;得到值&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;，将&lt;code class=&quot;highlighter-rouge&quot;&gt;cal(&quot;1&quot;,1,3)&lt;/code&gt;存放到延后执执行函数队列中。&lt;/p&gt;

&lt;p&gt;执行到第五行时，现行计算&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(&quot;20&quot;, a, b)&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(&quot;20&quot;, 0, 2)&lt;/code&gt;输出：&lt;code class=&quot;highlighter-rouge&quot;&gt;20 0 2 2&lt;/code&gt;得到值&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;,将&lt;code class=&quot;highlighter-rouge&quot;&gt;cal(&quot;2&quot;,0,2)&lt;/code&gt;存放到延后执行函数队列中。&lt;/p&gt;

&lt;p&gt;执行到末尾行，按队列先进后出原则依次执行：&lt;code class=&quot;highlighter-rouge&quot;&gt;cal(&quot;2&quot;,0,2)、cal(&quot;1&quot;,1,3) &lt;/code&gt;，依次输出：&lt;code class=&quot;highlighter-rouge&quot;&gt;2 0 2 2、1 1 3 4&lt;/code&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;7-请写出以下输入内容&quot;&gt;7. 请写出以下输入内容&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

func main() {
	s := make([]int, 5)
	fmt.Printf(&quot;%p\n&quot;, s)
	s = append(s, 1, 2, 3)
	fmt.Printf(&quot;%p\n&quot;, s) //new pointer
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xc4200180c0
0xc42001c0a0
[0 0 0 0 0 1 2 3]

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;8-下面的代码有什么问题&quot;&gt;8. 下面的代码有什么问题&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
package main

import (
	&quot;fmt&quot;
	&quot;sync&quot;
)

type UserAges struct {
	ages map[string]int
	sync.Mutex
}

func (ua *UserAges) Add(name string, age int) {
	ua.Lock()
	defer ua.Unlock()
	ua.ages[name] = age
}

func (ua *UserAges) Get(name string) int {
	if age, ok := ua.ages[name]; ok {
		return age
	}
	return -1
}

func main() {
	count := 1000
	gw := sync.WaitGroup{}
	gw.Add(count * 3)
	u := UserAges{ages: map[string]int{}}
	add := func(i int) {
		u.Add(fmt.Sprintf(&quot;user_%d&quot;, i), i)
		gw.Done()
	}
	
	for i := 0; i &amp;lt; count; i++ {
		go add(i)
		go add(i)
	}
	
	for i := 0; i &amp;lt; count; i++ {
		go func(i int) {
			defer gw.Done()
			u.Get(fmt.Sprintf(&quot;user_%d&quot;, i))
		}(i)
	}
	gw.Wait()
	fmt.Println(&quot;Done&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;输出结果：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fatal error: concurrent map read and map write

goroutine 2022 [running]:
runtime.throw(0x10c5472, 0x21)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt; 在执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get&lt;/code&gt; 方法时可能被&lt;code class=&quot;highlighter-rouge&quot;&gt;panic&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;虽然有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Mutex&lt;/code&gt;做写锁，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;是并发读写不安全的。&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;属于引用类型，并发读写时多个协程见是通过指针访问同一个地址，即访问共享变量，此时同时读写资源存在竞争关系。所以会报错误信息:&lt;code class=&quot;highlighter-rouge&quot;&gt;fatal error: concurrent map read and map write&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果第一次没复现&lt;code class=&quot;highlighter-rouge&quot;&gt;panic&lt;/code&gt;问题，可以再次运行，复现该问题。那么如何改善呢? 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Go1.9&lt;/code&gt;新版本中将提供并发安全的&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;。首先需要了解两种锁的不同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Mutex&lt;/code&gt;互斥锁&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sync.RWMutex&lt;/code&gt;读写锁，基于互斥锁的实现，可以加多个读锁或者一个写锁。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;RWMutex相关方法：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type RWMutex
    func (rw *RWMutex) Lock() 
    func (rw *RWMutex) RLock()
    func (rw *RWMutex) RLocker() Locker
    func (rw *RWMutex) RUnlock()
    func (rw *RWMutex) Unlock()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码改进如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;sync&quot;
)

type UserAges struct {
	ages map[string]int
	sync.RWMutex
}

func (ua *UserAges) Add(name string, age int) {
	ua.Lock()
	defer ua.Unlock()
	ua.ages[name] = age
}

func (ua *UserAges) Get(name string) int {
	ua.RLock()
	defer ua.RUnlock()
	if age, ok := ua.ages[name]; ok {
		return age
	}

	return -1
}

func main() {
	count := 10000
	gw := sync.WaitGroup{}
	gw.Add(count * 3)
	u := UserAges{ages: map[string]int{}}
	add := func(i int) {
		u.Add(fmt.Sprintf(&quot;user_%d&quot;, i), i)
		gw.Done()
	}
	for i := 0; i &amp;lt; count; i++ {
		go add(i)
		go add(i)
	}
	for i := 0; i &amp;lt; count; i++ {
		go func(i int) {
			defer gw.Done()
			u.Get(fmt.Sprintf(&quot;user_%d&quot;, i))
			fmt.Print(&quot;.&quot;)
		}(i)
	}
	gw.Wait()
	fmt.Println(&quot;Done&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
.
.
.
Done

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;9-下面的迭代会有什么问题&quot;&gt;9. 下面的迭代会有什么问题？&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;
import &quot;sync&quot;
import &quot;time&quot;

type ThreadSafeSet struct {
	sync.RWMutex
	s []int
}

func (set *ThreadSafeSet) Iter() &amp;lt;-chan interface{} {
	ch := make(chan interface{})
	go func() {
		set.RLock()

		for elem := range set.s {
			ch &amp;lt;- elem
			fmt.Print(&quot;get:&quot;, elem, &quot;,&quot;)
		}

		close(ch)
		set.RUnlock()

	}()
	return ch
}

func main() {
	//read()
	unRead()
}
func read() {
	set := ThreadSafeSet{}
	set.s = make([]int, 100)
	ch := set.Iter()
	closed := false
	for {
		select {
		case v, ok := &amp;lt;-ch:
			if ok {
				fmt.Print(&quot;read:&quot;, v, &quot;,&quot;)
			} else {
				closed = true
			}
		}
		if closed {
			fmt.Print(&quot;closed&quot;)
			break
		}
	}
	fmt.Print(&quot;Done&quot;)
}

func unRead() {
	set := ThreadSafeSet{}
	set.s = make([]int, 100)
	ch := set.Iter()
	_ = ch
	time.Sleep(5 * time.Second)
	fmt.Print(&quot;Done&quot;)
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt;内部迭代出现阻塞。默认初始化时无缓冲区，需要等待接收者读取后才能继续写入。&lt;/p&gt;

&lt;p&gt;chan在使用make初始化时可附带一个可选参数来设置缓冲区。默认无缓冲，题目中便初始化的是无缓冲区的chan，这样只有写入的元素直到被读取后才能继续写入，不然就一直阻塞。&lt;/p&gt;

&lt;p&gt;设置缓冲区大小后，写入数据时可连续写入到缓冲区中，直到缓冲区被占满。从chan中接收一次便可从缓冲区中释放一次。可以理解为chan是可以设置吞吐量的处理池。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ch := make(chan interface{}) &lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ch := make(chan interface{},1)&lt;/code&gt;是不一样的
无缓冲的 不仅仅是只能向 &lt;code class=&quot;highlighter-rouge&quot;&gt;ch&lt;/code&gt; 通道放 一个值 而是一直要有人接收，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;ch &amp;lt;- elem&lt;/code&gt;才会继续下去，要不然就一直阻塞着，也就是说有接收者才去放，没有接收者就阻塞。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;而缓冲为&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;则即使没有接收者也不会阻塞，因为缓冲大小是&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;只有当 放第二个值的时候 第一个还没被人拿走，这时候才会阻塞&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;10-以下代码能编译过去吗为什么&quot;&gt;10. 以下代码能编译过去吗？为什么？&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main
import (
	&quot;fmt&quot;
)
type People interface {
	Speak(string) string
}
type Stduent struct{}
func (stu *Stduent) Speak(think string) (talk string) {
	if think == &quot;bitch&quot; {
		talk = &quot;You are a good boy&quot;
	} else {
		talk = &quot;hi&quot;
	}
	return
}
func main() {
	var peo People = Stduent{}
	think := &quot;bitch&quot;
	fmt.Println(peo.Speak(think))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt;编译失败，值类型 &lt;code class=&quot;highlighter-rouge&quot;&gt;Student{}&lt;/code&gt; 未实现接口&lt;code class=&quot;highlighter-rouge&quot;&gt;People&lt;/code&gt;的方法，不能定义为 &lt;code class=&quot;highlighter-rouge&quot;&gt;People&lt;/code&gt; 类型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;两种正确修改方法：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方法一&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main
import (
	&quot;fmt&quot;
)
type People interface {
	Speak(string) string
}

type Stduent struct{}

func (stu Stduent) Speak(think string) (talk string) {
	if think == &quot;bitch&quot; {
		talk = &quot;You are a good boy&quot;
	} else {
		talk = &quot;hi&quot;
	}
	return
}
func main() {
	var peo People = Stduent{}
	think := &quot;hi&quot;
	fmt.Println(peo.Speak(think))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;方法二&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main
import (
	&quot;fmt&quot;
)
type People interface {
	Speak(string) string
}

type Stduent struct{}

func (stu Stduent) Speak(think string) (talk string) {
	if think == &quot;bitch&quot; {
		talk = &quot;You are a good boy&quot;
	} else {
		talk = &quot;hi&quot;
	}
	return
}
func main() {
	var peo People = &amp;amp;Stduent{}
	think := &quot;bitch&quot;
	fmt.Println(peo.Speak(think))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;指针类型的结构体对象可以同时调用结构体值类型和指针类型对应的方法。而值类型的结构体对象只能调用值类型对应的接口方法。&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://liusanyang.cn/2018/04/24/golang-interview/</link>
        <guid isPermaLink="true">http://liusanyang.cn/2018/04/24/golang-interview/</guid>
        
        <category>笔试题</category>
        
        
      </item>
    
  </channel>
</rss>
